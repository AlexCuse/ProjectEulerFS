module ProjectEuler.Trash

#light

//Problem 26 stages

// Mutable State

let floyd func x =
    let mutable tortoise = func x
    let mutable hare = func (func x)
    while not (tortoise = hare) do
        tortoise <- func tortoise
        hare <- func(func hare)

    let mutable mu = 0
    hare <- tortoise
    tortoise <- x
    while not (tortoise = hare) do
        tortoise <- func tortoise
        hare <- func hare
        mu <- mu + 1

    let mutable lam = 1
    hare <- func tortoise
    while not (tortoise = hare) do
        hare <- func hare
        lam <- lam + 1

    lam, mu

let brent f x =
    let mutable power = 1
    let mutable lam = 1
    let mutable tortoise = x
    let mutable hare = f x 

    while not (tortoise = hare) do
        if power = lam then
            tortoise <- hare
            power <- power * 2
            lam <- 0
        hare <- f hare
        lam <- lam + 1

    let mutable mu = 0
    tortoise <- x
    hare <- x

    for i in [1 .. lam] do
        hare <- f hare

    while not (tortoise = hare) do
        tortoise <- f tortoise
        hare <- f hare
        mu <- mu + 1

    lam, mu

let rec calc lst func longestCycleYet numberYieldingCycle =
    match lst with
        | head :: tail 
            -> 
                let tp = func head
                if (max longestCycleYet (fst tp)) = longestCycleYet then
                    calc tail func longestCycleYet numberYieldingCycle
                else 
                    calc tail func (fst tp) head
        | [] -> numberYieldingCycle

type DataContainer(n, v, r) =
    member x.num = n
    member x.value = v
    member x.rem = r

    override x.Equals(that) =
        match that with
            | :? DataContainer as dc -> 
                dc.num = x.num && dc.value = x.value && dc.rem = x.rem
            | _ -> false

let findNumberGeneratingLongestRepeatingSequence list =
    let rec calc lst func longestCycleYet numberYieldingCycle =
        match lst with
            | head :: tail 
                -> 
                    let tp = func head
                    if (max longestCycleYet (fst tp)) = longestCycleYet then
                        calc tail func longestCycleYet numberYieldingCycle
                    else 
                        calc tail func (fst tp) head
            | [] -> numberYieldingCycle

    let f (r:DataContainer) = 
        DataContainer(r.num, r.rem / r.num, ((r.rem % r.num) * 10))
        
    //s/b able to use floyd or brent implementations
    calc list (fun num -> brent f (DataContainer(num, 0, 1))) 0 0 


// Mutable State with comparator
// a fully generic brent implementation (that doesn't require a type with equals implemented)

let brentComparator f comp x =
    let mutable power = 1
    let mutable lam = 1
    let mutable tortoise = x
    let mutable hare = f x 

    while not (comp tortoise hare) do
        if power = lam then
            tortoise <- hare
            power <- power * 2
            lam <- 0
        hare <- f hare
        lam <- lam + 1

    let mutable mu = 0
    tortoise <- x
    hare <- x

    for i in [1 .. lam] do
        hare <- f hare

    while not (comp tortoise hare) do
        tortoise <- f tortoise
        hare <- f hare
        mu <- mu + 1

    lam, mu


// immutable take one
let brentImmutable f x =
    let resultsTuple = (1, 1, 0, x, f x)

    let rec applyUntilEqual func (power, lam, mu, tortoise, hare) =
        if (tortoise = hare) then
            (power, lam, mu, tortoise, hare)
        else
            applyUntilEqual func (power, lam, mu, tortoise, hare)

    let partOne (power, lam, mu, tortoise, hare) =
        if (power = lam) then
            (power * 2, 1, mu, hare, (f hare))
        else 
            (power, lam + 1, mu, tortoise, (f hare))

    let stepOneResult = 
        applyUntilEqual partOne resultsTuple
    
    let accelerateHare (power, lam, mu, tortoise, hare) =
        let rec accelerate times h =
            if times = 1 then
                hare
            else 
                accelerate (times - 1) (f h)
        (power, lam, mu, tortoise, accelerate lam hare)

    let accelerated = accelerateHare stepOneResult

    let partTwo (power, lam, mu, tortoise, hare) =
        (power, lam, mu + 1, f tortoise, f hare)

    let finalResult = applyUntilEqual partTwo accelerated

    let result (_, lam, mu, _, _) =
        lam, mu

    result finalResult




// immutable w/ type instead of tuple
// get a stack overflow on this for some reason
type dataPackage (p, l, m, t, h) =
    member x.Power = p
    member x.Lam = l
    member x.Mu = m
    member x.Tortoise = t
    member x.Hare = h

let brentProperWithType f x = 
                   
    let rec applyUntilEqual func (v:dataPackage) =
        if (v.Tortoise = v.Hare) then
            v
        else
            applyUntilEqual func v

    let phaseOne (v:dataPackage) =
        if (v.Power = v.Lam) then
            dataPackage(v.Power * 2, 1, v.Mu, v.Hare, (f v.Hare))
        else 
            dataPackage(v.Power, v.Lam + 1, v.Mu, v.Tortoise, (f v.Hare))

    let accelerateHare (v:dataPackage) =
        let rec accelerate times h =
            if times = 1 then
                h
            else 
                accelerate (times - 1) (f h)
        dataPackage(v.Power, v.Lam, v.Mu, v.Tortoise, accelerate v.Lam v.Hare)

    let phaseTwo (v:dataPackage) =
        dataPackage(v.Power, v.Lam, (v.Mu + 1), (f v.Tortoise), (f v.Hare))

    dataPackage(1, 1, 0, x, f x) 
        |> applyUntilEqual phaseOne
        |> accelerateHare
        |> applyUntilEqual phaseTwo
        |> fun x -> x.Lam, x.Mu

let findNumberGeneratingLongestRepeatingSequenceWithComparator list =
    let f (a, b, c) = 
        a, c / a, (c % a) * 10
    
    let comp (a1, b1, c1) (a2, b2, c2) =
        a1 = a2 && b2 = b2 && c1 = c2

    calc list (fun num -> brentComparator f comp (num, 0, 1)) 0 0 




//------------------

//Problem 32, brute force (VERY slow)

open System

let max =  98765

let digits = 
    [|'1';'2';'3';'4';'5';'6';'7';'8';'9';|]

let digitCounts =
   Array.create 9 0
      
let isPandigital x y =
    Array.fill digitCounts 0 9 0
    let chars = 
        ((string x) + (string y) + (string (x * y))).ToCharArray()
    if chars.Length <> 9 || chars |> Array.exists(fun x-> x = '0') then false
    else
        chars |> Array.iter (fun x -> digitCounts.[(int x) - 49] <- digitCounts.[(int x) - 49] + 1)
        Array.TrueForAll(digitCounts, fun x -> x = 1)


let solve =
    seq {
        for a in 1 .. max do
            for b in (a + 1) .. max do
                yield a, b }
    |> Seq.filter (fun (x, y) -> isPandigital x y)
    |> Seq.map (fun (x, y) -> x * y)
    |> Seq.distinct
    |> Seq.sum

//---


//-----     INITIAL PROBLEM 40 SOLUTION 

open Util

let allNums = Seq.unfold (fun x -> Some(x, x + 1)) 1

let strangeDigits =
    allNums
    |> Seq.collect (fun num -> (num |> digitsFrom))
    |> Seq.take(1000000)
    |> Array.ofSeq  // <- force this to only be calculated once by forcing to array instead of memoizing

let digit n =
    strangeDigits.[(n - 1)]

let solve =
    [0..6] 
        |> Seq.map (fun n -> digit (pown 10 n)) 
        |> Seq.reduce (fun acc x -> acc * x)


//------


// First try at # 58 (thought I needed to check along each diagonal instead of total)

open Util

let ringSizes = 
    //skipping center
    Seq.unfold (fun n -> Some(n, n+2)) 3

//0 to 3 for each corner
let positionCalc n v =
    (n * n) - (v * (n - 1))

let d1 = 
    ringSizes
    |> Seq.map (fun n -> positionCalc n 0)
    |> Seq.zip (ringSizes |> Seq.map (fun n' -> positionCalc n' 2))
    
let d2 = 
    ringSizes
    |> Seq.map (fun n -> positionCalc n 1)
    |> Seq.zip (ringSizes |> Seq.map (fun n' -> positionCalc n' 3))

let solve =
    d1
    |> Seq.zip d2
    |> Seq.zip ringSizes
    |> Seq.scan (fun (sz, dp1, dp2) (q, (x, y)) ->
        let p1 = if ((fst x) |> isPrime) then 1 else 0
        let p1' = if ((snd x) |> isPrime) then 1 else 0
        let p2 = if ((fst y) |> isPrime) then 1 else 0
        let p2' = if ((snd y) |> isPrime) then 1 else 0
        q, dp1 + p1 + p1', dp2 + p2 + p2'
    ) (0, 0, 0)
    |> Seq.skip 1
    |> Seq.skipWhile (fun (x,y,z) -> (((float y)/(float x)) > 0.1) && (((float z)/(float x)) > 0.1))
    |> Seq.head

//-------

